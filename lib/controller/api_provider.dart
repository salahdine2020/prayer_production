import 'dart:convert';
import 'package:dio/dio.dart';
import 'package:prayer_production/models/download_user_inf.dart';
import 'package:prayer_production/models/prayer_model.dart';
import 'package:prayer_production/models/search_mosques_model.dart' ;
import 'package:prayer_production/models/servicesbymosque_model.dart' as service_model;
import 'package:prayer_production/repository/shared_base.dart';
import 'package:prayer_production/utils/logging_interceptor.dart';
import 'package:http/http.dart' as http;

class PrayerProvider {
  String city_me = 'brussels'; //mecca
  final String _endpoint2 =
      "https://api.pray.zone/v2/times/today.json?city=brussels&fbclid=IwAR1NaVff729cKRBOWheoKHk_G1yI3QWe_C3po6h9g8xNTQh9xQYpKl5hfM8";
  final String _endpoint3 = 'https://allocomcompany.com/prayer_organizer';
  final String _search_mosque = '/api_update.php?action=get_mosques';
  final String _inscription_user = '/api_update.php?action=add_person';
  final String _modif_inf_user = '/api_update.php?action=add_person';
  final String _mosque_inf = '/api_update.php?action=get_info_mosque';
  final String _mosque_service = '/api_update.php?action=get_services';
  final String _user_inf_download = '/api_update.php?action=get_info_person';
  Dio _dio;

  PrayerProvider() {
    BaseOptions options = BaseOptions(
      baseUrl: _endpoint3,
      //receiveTimeout: 5000,
      //connectTimeout: 5000,
    );
    _dio = Dio(options);
    _dio.interceptors.add(LoggingInterceptor());
    _dio.options.contentType = Headers.formUrlEncodedContentType;
  }

  Future<List<String>> getPrayerTime() async {
    // PrayerResponse
    List<String> val_times = [];
    try {
      Response response = await _dio.get(_endpoint2);
      //var decoded = jsonDecode(response.data);
      final respons_information = Autogenerated.fromJson(response.data);
      Results res = respons_information.results;
      List<Datetime> list_times = res.datetime;
      Times time_object = list_times[0].times;
      Date date_todaye = list_times[0].date;
      print('-------${date_todaye.hijri.toString()}----------');
      //val_times.add(date_todaye.gregorian);//0
      //val_times.add(date_todaye.hijri);//1
      val_times.add(time_object.fajr);
      val_times.add(time_object.fajr);
      val_times.add(time_object.fajr); //2
      val_times.add(time_object.imsak); //3
      val_times.add(time_object.sunrise); //4
      val_times.add(time_object.dhuhr); //5
      val_times.add(time_object.asr); //6
      val_times.add(time_object.maghrib); //7
      val_times.add(time_object.isha); //8
      val_times.add(time_object.midnight); //9
      val_times.add(date_todaye.gregorian.toString()); //10
      val_times.add(date_todaye.hijri.toString()); //11
      print(val_times);
      return val_times;
    } catch (error, stacktrace) {
      print("Exception occured: $error stackTrace: $stacktrace");
      //print('Error when call API');
      //PrayerResponse.withError(_handleError(error));
    }
  }
  Future<List<Data>> PostSearchMosques({String postal_code}) async {
    // PrayerResponse
    try {
      //List<String> val_inf = [];
      var parms = {
        'code_postal': '$postal_code',
      };
      Response response = await _dio.post('/api_update.php?action=get_mosques',
          data: parms,
          options: Options(contentType: Headers.formUrlEncodedContentType),
          onSendProgress: (int sent, int total) {
        print('sent : $sent // total : $total');
      }, onReceiveProgress: (v, s) {
        print('v : $v // s : $s');
      });
      final data = SearchMosques.fromJson(jsonDecode(response.data));
      List<Data> data_get = data.data;
      print('--------data allocompany : ${data_get.toString()}--------');
      return data_get;
    } catch (error, stacktrace) {
      _handleError(error);
      print("Exception occured: $error stackTrace: $stacktrace");
    }
  }
  Future PostToGetMosques({String id}) async {
    try {
      var parms = {
        'id': '$id',
      };
      Response response = await _dio.post(_mosque_inf,
          data: parms,
          options: Options(contentType: Headers.formUrlEncodedContentType),
          onSendProgress: (int sent, int total) {
        print('sent : $sent // total : $total');
      }, onReceiveProgress: (v, s) {
        print('v : $v // s : $s');
      });
      /// jsonDecode(response.data)
      print('******* GET Mosque Information ${response.data} ********');
    } catch (error, stacktrace) {
      _handleError(error);
      print("Exception occured: $error stackTrace: $stacktrace");
    }
  }
  Future<List<service_model.Data>> PostToGetServices ({String id_mosque}) async {
    try {
      var parms = {
        'id_mosque': '$id_mosque',
      };
      Response response = await _dio.post(_mosque_service,
          data: parms,
          options: Options(contentType: Headers.formUrlEncodedContentType),
          onSendProgress: (int sent, int total) {
        print('sent : $sent // total : $total');
      }, onReceiveProgress: (v, s) {
        print('v : $v // s : $s');
      });
      /// jsonDecode(response.data)
      /// GetServices
      var data = json.decode(response.data);
      final data_later = service_model.GetServices.fromJson(data);
      List<service_model.Data> data_list = data_later.data;
      print('******* GET Services Mosque Information ${data_list.length} ********');
      return data_list;
    } catch (error, stacktrace) {
      _handleError(error);
      print("Exception occured: $error stackTrace: $stacktrace");
    }
  }
  Future PostFieldInscription({nom, prenom, code_postal, num_telephone, flag_sexe}) async {
    // PrayerResponse
    try {
      //List<String> val_inf = [];
      var parms = {
      'nom' : nom,
      'prenom' : prenom,
      'code_postal': code_postal,
      'num_telephone' : num_telephone,
      'flag_sexe': flag_sexe,
    };
      Response response = await _dio.post(_inscription_user,
          data: parms,
          options: Options(contentType: Headers.formUrlEncodedContentType),
          onSendProgress: (int sent, int total) {
            print('sent : $sent // total : $total');
          }, onReceiveProgress: (v, s) {
            print('v : $v // s : $s');
          });
      var _val = json.decode(response.data);
      print(_val.runtimeType);
      if(_val is Map) print('succes');
      print('***** Response body ${_val['id']} **********');
      RepositeryShared().saveUserID(_val);
    } catch (error, stacktrace) {
      _handleError(error);
      print("Exception occured: $error stackTrace: $stacktrace");
    }
  }
  Future<DownloadUsermModel> PostToDownloadUser({String id}) async {
    try {
      //List<String> val_inf = [];
      var id_shared = await RepositeryShared().getUserID();
      print('----- id Shared $id_shared ---------');
      if(id_shared == null){
        id_shared = id;
      }
      var parms = {
        'id': id_shared,
      };
      Response response = await _dio.post(_user_inf_download,
          data: parms,
          options: Options(contentType: Headers.formUrlEncodedContentType),
          onSendProgress: (int sent, int total) {
            print('sent : $sent // total : $total');
          }, onReceiveProgress: (v, s) {
            print('v : $v // s : $s');
          });
      print('***** Response body Download User : ${response.data} **********');
      final data_prebare = json.decode(response.data);
      final data = DownloadUsermModel.fromJson(data_prebare[0]);
      print('***** Type of data value : ${data.runtimeType} **********');
      return data;
    } catch (error, stacktrace) {
      _handleError(error);
      print("Exception occured: $error stackTrace: $stacktrace");
    }
  }

  String _handleError(Error error) {
    String errorDescription = "";
    if (error is DioError) {
      DioError dioError = error as DioError;
      switch (dioError.type) {
        case DioErrorType.CANCEL:
          errorDescription = "Request to API server was cancelled";
          break;
        case DioErrorType.CONNECT_TIMEOUT:
          errorDescription = "Connection timeout with API server";
          break;
        case DioErrorType.DEFAULT:
          errorDescription =
              "Connection to API server failed due to internet connection";
          break;
        case DioErrorType.RECEIVE_TIMEOUT:
          errorDescription = "Receive timeout in connection with API server";
          break;
        case DioErrorType.RESPONSE:
          errorDescription =
              "Received invalid status code: ${dioError.response.statusCode}";
          break;
        case DioErrorType.SEND_TIMEOUT:
          errorDescription = "Send timeout in connection with API server";
          break;
      }
    } else {
      errorDescription = "Unexpected error occured";
    }
    return errorDescription;
  }
}
